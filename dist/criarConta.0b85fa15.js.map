{"mappings":"ACAA,MAAM,EAAW,SAAS,cAAc,CAAC,kBACnC,EAAQ,SAAS,cAAc,CAAC,eAChC,EAAW,SAAS,cAAc,CAAC,kBACnC,EAAsB,SAAS,cAAc,CAAC,mBAC9C,EAAY,SAAS,cAAc,CAAC,SACpC,EAAW,8CAMX,EAAc,CAJlB,yBAA0B,2CAC1B,uBAAwB,2CACxB,4BAA6B,IAI7B,eAAgB,kBAClB,EAEM,EAAsB,MAAO,IACjC,IAAM,EAAW,MAAM,MAAM,CAAC,EAAE,EAAS,oBAAoB,EAAE,EAAS,EAAE,CAAC,CAAE,CAC3E,OAAQ,MACR,QAAS,CACX,GAEA,GAAI,EAAS,EAAE,CAEb,MAAO,AADM,CAAA,MAAM,EAAS,IAAI,EAAhC,EACY,OAAO,CAAC,MAAM,CAAG,CACxB,EACL,IAAM,EAAY,MAAM,EAAS,IAAI,EACrC,OAAM,AAAI,MAAM,CAAC,sCAAmC,EAAE,EAAU,KAAK,CAAC,CAAC,CACzE,CACF,EAEM,EAAa,UACjB,IAAM,EAAW,CACf,SAAU,EAAS,KAAK,CACxB,MAAO,EAAM,KAAK,CAClB,SAAU,EAAS,KAAK,AAC1B,EAEM,EAAW,MAAM,MAAM,EAAU,CACrC,OAAQ,OACR,QAAS,EACT,KAAM,KAAK,SAAS,CAAC,EACvB,GAEA,GAAI,EAAS,EAAE,CACb,OAAO,MAAM,EAAS,IAAI,EACrB,EACL,IAAM,EAAY,MAAM,EAAS,IAAI,EACrC,OAAM,AAAI,MAAM,CAAC,0BAAuB,EAAE,EAAU,KAAK,CAAC,CAAC,CAC7D,CACF,EAEA,EAAoB,gBAAgB,CAAC,QAAS,UAC5C,GAAI,CACF,GAAK,cAAc,IAAI,CAAC,EAAS,KAAK,GAE/B,GAAI,AAAmB,KAAnB,EAAS,KAAK,EAAW,AAAgB,KAAhB,EAAM,KAAK,EAAW,AAAmB,KAAnB,EAAS,KAAK,CACtE,MAAM,AAAI,MAAM,iCACX,GAAI,EAAS,KAAK,CAAC,MAAM,CAAG,EACjC,MAAM,AAAI,MAAM,uDACX,GAAI,EAAS,KAAK,CAAC,MAAM,CAAG,EACjC,MAAM,AAAI,MAAM,iDANhB,MAAM,AAAI,MAAM,mDAUjB,GADsB,MAAM,EAAoB,EAAS,KAAK,EAE5D,MAAM,AAAI,MAAM,gDAGnB,OAAM,IAEN,OAAO,QAAQ,CAAC,IAAI,CAAG,YACzB,CAAE,MAAO,EAAO,CACd,EAAU,WAAW,CAAG,EAAM,OAAO,AACvC,CACF","sources":["<anon>","back-end/postUser.js"],"sourcesContent":["const userName = document.getElementById(\"input-username\");\nconst email = document.getElementById(\"input-email\");\nconst password = document.getElementById(\"input-password\");\nconst buttonCreateAccount = document.getElementById(\"btn-criar-conta\");\nconst failAlert = document.getElementById(\"alert\");\nconst urlUsers = \"https://parseapi.back4app.com/classes/_User\";\nconst headers = {\n    \"X-Parse-Application-Id\": \"EtXU3jV6pXkDHC5aRDi2ewMJbq3giWgbfBSeIlNq\",\n    \"X-Parse-REST-API-Key\": \"4P3E1V7SmTX23TsXSEHyo8N7Q8aVgK9H47uGTWYr\",\n    \"X-Parse-Revocable-Session\": \"1\"\n};\nconst headersJson = {\n    ...headers,\n    \"Content-Type\": \"application/json\"\n};\nconst checkUsernameExists = async (username)=>{\n    const response = await fetch(`${urlUsers}?where={\"username\":\"${username}\"}`, {\n        method: \"GET\",\n        headers: headersJson\n    });\n    if (response.ok) {\n        const data = await response.json();\n        return data.results.length > 0;\n    } else {\n        const errorData = await response.json();\n        throw new Error(`Erro ao verificar nome de usu\\xe1rio: ${errorData.error}`);\n    }\n};\nconst createUser = async ()=>{\n    const userData = {\n        username: userName.value,\n        email: email.value,\n        password: password.value\n    };\n    const response = await fetch(urlUsers, {\n        method: \"POST\",\n        headers: headersJson,\n        body: JSON.stringify(userData)\n    });\n    if (response.ok) return await response.json();\n    else {\n        const errorData = await response.json();\n        throw new Error(`Erro ao criar usu\\xe1rio: ${errorData.error}`);\n    }\n};\nbuttonCreateAccount.addEventListener(\"click\", async ()=>{\n    try {\n        if (!/^[a-zA-Z]+$/.test(userName.value)) throw new Error(\"O nome de usu\\xe1rio \\xe9 composto apenas por letras.\");\n        else if (userName.value === \"\" || email.value === \"\" || password.value === \"\") throw new Error(\"Preencha os campos restantes.\");\n        else if (userName.value.length < 3) throw new Error(\"O nome de usu\\xe1rio deve ter pelo menos 3 caracteres.\");\n        else if (password.value.length < 5) throw new Error(\"A senha deve ter no m\\xednimo 5 caracteres.\");\n        const usernameExists = await checkUsernameExists(userName.value);\n        if (usernameExists) throw new Error(\"Usu\\xe1rio j\\xe1 existente, mude o nome de usu\\xe1rio.\");\n        await createUser();\n        window.location.href = \"index.html\";\n    } catch (error) {\n        failAlert.textContent = error.message;\n    }\n});\n\n//# sourceMappingURL=criarConta.0b85fa15.js.map\n","const userName = document.getElementById(\"input-username\");\r\nconst email = document.getElementById(\"input-email\");\r\nconst password = document.getElementById(\"input-password\");\r\nconst buttonCreateAccount = document.getElementById(\"btn-criar-conta\");\r\nconst failAlert = document.getElementById(\"alert\");\r\nconst urlUsers = \"https://parseapi.back4app.com/classes/_User\";\r\nconst headers = {\r\n  \"X-Parse-Application-Id\": \"EtXU3jV6pXkDHC5aRDi2ewMJbq3giWgbfBSeIlNq\",\r\n  \"X-Parse-REST-API-Key\": \"4P3E1V7SmTX23TsXSEHyo8N7Q8aVgK9H47uGTWYr\",\r\n  \"X-Parse-Revocable-Session\": \"1\",\r\n};\r\nconst headersJson = {\r\n  ...headers,\r\n  \"Content-Type\": \"application/json\",\r\n};\r\n\r\nconst checkUsernameExists = async (username) => {\r\n  const response = await fetch(`${urlUsers}?where={\"username\":\"${username}\"}`, {\r\n    method: \"GET\",\r\n    headers: headersJson,\r\n  });\r\n\r\n  if (response.ok) {\r\n    const data = await response.json();\r\n    return data.results.length > 0;\r\n  } else {\r\n    const errorData = await response.json();\r\n    throw new Error(`Erro ao verificar nome de usuário: ${errorData.error}`);\r\n  }\r\n};\r\n\r\nconst createUser = async () => {\r\n  const userData = {\r\n    username: userName.value,\r\n    email: email.value,\r\n    password: password.value,\r\n  };\r\n\r\n  const response = await fetch(urlUsers, {\r\n    method: \"POST\",\r\n    headers: headersJson,\r\n    body: JSON.stringify(userData),\r\n  });\r\n\r\n  if (response.ok) {\r\n    return await response.json();\r\n  } else {\r\n    const errorData = await response.json();\r\n    throw new Error(`Erro ao criar usuário: ${errorData.error}`);\r\n  }\r\n};\r\n\r\nbuttonCreateAccount.addEventListener(\"click\", async () => {\r\n  try {\r\n    if (!/^[a-zA-Z]+$/.test(userName.value)) {\r\n      throw new Error(\"O nome de usuário é composto apenas por letras.\");\r\n    } else if (userName.value === \"\" || email.value === \"\" || password.value === \"\") {\r\n      throw new Error(\"Preencha os campos restantes.\");\r\n    } else if (userName.value.length < 3) {\r\n      throw new Error(\"O nome de usuário deve ter pelo menos 3 caracteres.\");\r\n    } else if (password.value.length < 5) {\r\n      throw new Error(\"A senha deve ter no mínimo 5 caracteres.\");\r\n    }\r\n    \r\n    const usernameExists = await checkUsernameExists(userName.value);\r\n     if (usernameExists) {\r\n       throw new Error(\"Usuário já existente, mude o nome de usuário.\");\r\n     }\r\n\r\n    await createUser();\r\n    \r\n    window.location.href = \"index.html\";\r\n  } catch (error) {\r\n    failAlert.textContent = error.message;\r\n  }\r\n});"],"names":["userName","document","getElementById","email","password","buttonCreateAccount","failAlert","urlUsers","headersJson","checkUsernameExists","username","response","fetch","method","headers","ok","data","json","results","length","errorData","Error","error","createUser","userData","value","body","JSON","stringify","addEventListener","test","window","location","href","textContent","message"],"version":3,"file":"criarConta.0b85fa15.js.map"}