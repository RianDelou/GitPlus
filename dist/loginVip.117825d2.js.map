{"mappings":"ACAA,MAAM,EAAY,SAAS,cAAc,CAAC,mBACpC,EAAY,SAAS,cAAc,CAAC,mBACpC,EAAY,SAAS,cAAc,CAAC,mBACpC,EAAQ,SAAS,cAAc,CAAC,eAChC,EAAW,SAAS,cAAc,CAAC,kBACnC,EAAsB,SAAS,cAAc,CAAC,mBAC9C,EAAY,SAAS,cAAc,CAAC,SACpC,EAAc,gDACd,EAAc,8CAMd,EAAc,CAJlB,yBAA0B,2CAC1B,uBAAwB,2CACxB,4BAA6B,IAI7B,eAAgB,kBAClB,EAEM,EAAc,MAAO,EAAO,KAChC,IAAM,EAAW,MAAM,MAAM,CAAC,EAAE,EAAY,SAAS,EAAE,EAAM,GAAG,EAAE,EAAM,EAAE,CAAC,CAAE,CAC3E,OAAQ,MACR,QAAS,CACX,GAEA,GAAI,EAAS,EAAE,CAEb,CAAA,GAAI,AADS,CAAA,MAAM,EAAS,IAAI,EAAhC,EACS,OAAO,CAAC,MAAM,CAAG,EAAG,MAAO,CAAA,CAApC,KACK,CACL,IAAM,EAAY,MAAM,EAAS,IAAI,EACrC,OAAM,AAAI,MAAM,CAAC,kBAAkB,EAAE,EAAM,EAAE,EAAE,EAAU,KAAK,CAAC,CAAC,CAClE,CAEA,IAAM,EAAc,MAAM,MAAM,CAAC,EAAE,EAAY,SAAS,EAAE,EAAM,GAAG,EAAE,EAAM,EAAE,CAAC,CAAE,CAC9E,OAAQ,MACR,QAAS,CACX,GAEA,GAAI,EAAY,EAAE,CAEhB,MAAO,AADM,CAAA,MAAM,EAAY,IAAI,EAAnC,EACY,OAAO,CAAC,MAAM,CAAG,CACxB,EACL,IAAM,EAAY,MAAM,EAAY,IAAI,EACxC,OAAM,AAAI,MAAM,CAAC,kBAAkB,EAAE,EAAM,QAAQ,EAAE,EAAU,KAAK,CAAC,CAAC,CACxE,CACF,EAoBM,EAAgB,UAElB,IAAI,EAAQ,AAwFhB,WACI,IAAI,EACF,iEACE,EAAc,GAClB,IAAK,IAAI,EAAI,EAAG,EAAI,GAAI,IACtB,GAAe,CAAK,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAM,MAAM,EAAE,CAEhE,OAAO,CACX,IA9FU,EAAW,CACf,YAAa,EAAU,KAAK,CAC5B,cAAe,EAAU,KAAK,CAC9B,SAAU,CACZ,EAEM,EAAW,MAAM,MAAM,EAAa,CACxC,OAAQ,OACR,QAAS,EACT,KAAM,KAAK,SAAS,CAAC,EACvB,GAEA,GAAI,EAAS,EAAE,CAEb,EAAoB,AADL,CAAA,MAAM,EAAS,IAAI,EAAlC,EAC2B,QAAQ,CAAE,OAChC,CACL,IAAM,EAAY,MAAM,EAAS,IAAI,EACrC,CAAA,EAAU,WAAW,CAAG,CAAC,8BAA2B,EAAE,EAAU,KAAK,CAAC,CAAC,AACzE,CACF,EAEM,EAAsB,MAAO,EAAW,KAC9C,IAAM,EAAW,CACf,SAAU,EAAU,KAAK,CACzB,MAAO,EAAM,KAAK,CAClB,SAAU,EAAS,KAAK,CACxB,QAAS,CACL,OAAU,UACV,UAAa,UACb,SAAY,CACd,CACJ,EAEM,EAAW,MAAM,MAAM,EAAa,CACxC,OAAQ,OACR,QAAS,EACT,KAAM,KAAK,SAAS,CAAC,EACvB,GAEA,GAAI,EAAS,EAAE,CAAE,CACf,IAAM,EAAK,SAAS,cAAc,CAAC,YAC7B,EAAI,SAAS,cAAc,CAAC,SAIlC,OAHA,EAAG,SAAS,CAAG,uCACf,EAAE,SAAS,CAAG,EACd,EAAU,WAAW,CAAG,GACjB,MAAM,EAAS,IAAI,EAC5B,CAAO,CACL,IAAM,EAAY,MAAM,EAAS,IAAI,EACrC,CAAA,EAAU,WAAW,CAAG,CAAC,8BAA2B,EAAE,EAAU,KAAK,CAAC,CAAC,AACzE,CACF,EAEA,EAAoB,gBAAgB,CAAC,QAAS,UAC5C,GAAI,CACF,GAAI,AAAC,cAAc,IAAI,CAAC,EAAU,KAAK,GAAM,cAAc,IAAI,CAAC,EAAU,KAAK,GAAM,cAAc,IAAI,CAAC,EAAU,KAAK,GAEhH,GAAI,AAAoB,KAApB,EAAU,KAAK,EAAW,AAAmB,IAAnB,EAAU,KAAK,EAAW,AAAmB,IAAnB,EAAU,KAAK,EAAU,AAAgB,KAAhB,EAAM,KAAK,EAAW,AAAmB,KAAnB,EAAS,KAAK,CAC1H,MAAM,AAAI,MAAM,iCACX,GAAI,EAAU,KAAK,CAAC,MAAM,CAAG,EAClC,MAAM,AAAI,MAAM,uDACX,GAAI,EAAS,KAAK,CAAC,MAAM,CAAG,EACjC,MAAM,AAAI,MAAM,iDANhB,MAAM,AAAI,MAAM,mDAgBlB,GADuB,MAAM,EAAY,WAAY,EAAU,KAAK,EAElE,MAAM,AAAI,MAAM,iDAIlB,GADwB,MAAM,EAAY,QAAS,EAAM,KAAK,EAE5D,MAAM,AAAI,MAAM,iDAGlB,OAAM,GACR,CAAE,MAAO,EAAO,CACd,EAAU,WAAW,CAAG,EAAM,OAAO,AACvC,CACF","sources":["<anon>","back-end/forClientVip/post.js"],"sourcesContent":["const userName1 = document.getElementById(\"input-username1\");\nconst userName2 = document.getElementById(\"input-username2\");\nconst userName3 = document.getElementById(\"input-username3\");\nconst email = document.getElementById(\"input-email\");\nconst password = document.getElementById(\"input-password\");\nconst buttonCreateAccount = document.getElementById(\"btn-criar-conta\");\nconst failAlert = document.getElementById(\"alert\");\nconst urlUsersVip = \"https://parseapi.back4app.com/classes/UserVip\";\nconst urlAllUsers = \"https://parseapi.back4app.com/classes/_User\";\nconst headers = {\n    \"X-Parse-Application-Id\": \"EtXU3jV6pXkDHC5aRDi2ewMJbq3giWgbfBSeIlNq\",\n    \"X-Parse-REST-API-Key\": \"4P3E1V7SmTX23TsXSEHyo8N7Q8aVgK9H47uGTWYr\",\n    \"X-Parse-Revocable-Session\": \"1\"\n};\nconst headersJson = {\n    ...headers,\n    \"Content-Type\": \"application/json\"\n};\nconst checkExists = async (field, value)=>{\n    const response = await fetch(`${urlAllUsers}?where={\"${field}\":\"${value}\"}`, {\n        method: \"GET\",\n        headers: headersJson\n    });\n    if (response.ok) {\n        const data = await response.json();\n        if (data.results.length > 0) return true;\n    } else {\n        const errorData = await response.json();\n        throw new Error(`Erro ao verificar ${field}: ${errorData.error}`);\n    }\n    const responseVip = await fetch(`${urlUsersVip}?where={\"${field}\":\"${value}\"}`, {\n        method: \"GET\",\n        headers: headersJson\n    });\n    if (responseVip.ok) {\n        const data = await responseVip.json();\n        return data.results.length > 0;\n    } else {\n        const errorData = await responseVip.json();\n        throw new Error(`Erro ao verificar ${field} (VIP): ${errorData.error}`);\n    }\n};\n// CHECAGEM ANTIGA - SALVANDO PRA NÃO PERDER LÓGICA\n// const checkUserExists = async (username, email) => {\n//   const queryUrl = `${urlallUsers}?where=${encodeURIComponent(JSON.stringify({\n//     $or: [\n//       { username: username },\n//       { email: email }\n//     ]\n//   }))}`;\n//   const response = await fetch(queryUrl, {\n//     method: \"GET\",\n//     headers: headersJson,\n//   });\n//   const data = await response.json();\n//   return data.results.length > 0;\n// };\nconst createUserVip = async ()=>{\n    let token = generateToken();\n    const userData = {\n        usernameTwo: userName2.value,\n        usernameThree: userName3.value,\n        tokenVip: token\n    };\n    const response = await fetch(urlUsersVip, {\n        method: \"POST\",\n        headers: headersJson,\n        body: JSON.stringify(userData)\n    });\n    if (response.ok) {\n        const pickId = await response.json();\n        restrictInformation(pickId.objectId, token); // putting the information in user place\n    } else {\n        const errorData = await response.json();\n        failAlert.textContent = `Erro ao criar usu\\xe1rio vip: ${errorData.error}`;\n    }\n};\nconst restrictInformation = async (userVipId, token)=>{\n    const userData = {\n        username: userName1.value,\n        email: email.value,\n        password: password.value,\n        UserVip: {\n            \"__type\": \"Pointer\",\n            \"className\": \"UserVip\",\n            \"objectId\": userVipId\n        }\n    };\n    const response = await fetch(urlAllUsers, {\n        method: \"POST\",\n        headers: headersJson,\n        body: JSON.stringify(userData)\n    });\n    if (response.ok) {\n        const h3 = document.getElementById(\"h3-token\");\n        const p = document.getElementById(\"token\");\n        h3.innerHTML = \"Token vip (salve ele em algum lugar)\";\n        p.innerHTML = token;\n        failAlert.textContent = \"\";\n        return await response.json();\n    } else {\n        const errorData = await response.json();\n        failAlert.textContent = `Erro ao criar usu\\xe1rio vip: ${errorData.error}`;\n    }\n};\nbuttonCreateAccount.addEventListener(\"click\", async ()=>{\n    try {\n        if (!/^[a-zA-Z]+$/.test(userName1.value) && !/^[a-zA-Z]+$/.test(userName2.value) && !/^[a-zA-Z]+$/.test(userName1.value)) throw new Error(\"O nome de usu\\xe1rio \\xe9 composto apenas por letras.\");\n        else if (userName1.value === \"\" || userName2.value == \"\" || userName2.value == \"\" || email.value === \"\" || password.value === \"\") throw new Error(\"Preencha os campos restantes.\");\n        else if (userName1.value.length < 3) throw new Error(\"O nome de usu\\xe1rio deve ter pelo menos 3 caracteres.\");\n        else if (password.value.length < 5) throw new Error(\"A senha deve ter no m\\xednimo 5 caracteres.\");\n        // CHECAGEM ANTIGA - SALVANDO PRA NÃO PERDER LÓGICA\n        // const userExists = await checkUserExists(userName1.value, email.value);\n        // if (userExists) {\n        //   throw new Error(\"Nome de usuário ou email já existente.\");\n        // }\n        const usernameExists = await checkExists(\"username\", userName1.value);\n        if (usernameExists) throw new Error(\"Usu\\xe1rio j\\xe1 existente, mude o nome de usu\\xe1rio.\");\n        const useremailExists = await checkExists(\"email\", email.value);\n        if (useremailExists) throw new Error(\"Usu\\xe1rio j\\xe1 existente, mude o email de usu\\xe1rio.\");\n        await createUserVip();\n    } catch (error) {\n        failAlert.textContent = error.message;\n    }\n});\nfunction generateToken() {\n    let chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    let tokenNumber = \"\";\n    for(let i = 0; i < 20; i++)tokenNumber += chars[Math.floor(Math.random() * chars.length)];\n    return tokenNumber;\n}\n\n//# sourceMappingURL=loginVip.117825d2.js.map\n","const userName1 = document.getElementById(\"input-username1\");\r\nconst userName2 = document.getElementById(\"input-username2\");\r\nconst userName3 = document.getElementById(\"input-username3\");\r\nconst email = document.getElementById(\"input-email\");\r\nconst password = document.getElementById(\"input-password\");\r\nconst buttonCreateAccount = document.getElementById(\"btn-criar-conta\");\r\nconst failAlert = document.getElementById(\"alert\");\r\nconst urlUsersVip = \"https://parseapi.back4app.com/classes/UserVip\";\r\nconst urlAllUsers = \"https://parseapi.back4app.com/classes/_User\";\r\nconst headers = {\r\n  \"X-Parse-Application-Id\": \"EtXU3jV6pXkDHC5aRDi2ewMJbq3giWgbfBSeIlNq\",\r\n  \"X-Parse-REST-API-Key\": \"4P3E1V7SmTX23TsXSEHyo8N7Q8aVgK9H47uGTWYr\",\r\n  \"X-Parse-Revocable-Session\": \"1\",\r\n};\r\nconst headersJson = {\r\n  ...headers,\r\n  \"Content-Type\": \"application/json\",\r\n};\r\n\r\nconst checkExists = async (field, value) => {\r\n  const response = await fetch(`${urlAllUsers}?where={\"${field}\":\"${value}\"}`, {\r\n    method: \"GET\",\r\n    headers: headersJson,\r\n  });\r\n\r\n  if (response.ok) {\r\n    const data = await response.json();\r\n    if (data.results.length > 0) return true;\r\n  } else {\r\n    const errorData = await response.json();\r\n    throw new Error(`Erro ao verificar ${field}: ${errorData.error}`);\r\n  }\r\n\r\n  const responseVip = await fetch(`${urlUsersVip}?where={\"${field}\":\"${value}\"}`, {\r\n    method: \"GET\",\r\n    headers: headersJson,\r\n  });\r\n\r\n  if (responseVip.ok) {\r\n    const data = await responseVip.json();\r\n    return data.results.length > 0;\r\n  } else {\r\n    const errorData = await responseVip.json();\r\n    throw new Error(`Erro ao verificar ${field} (VIP): ${errorData.error}`);\r\n  }\r\n};\r\n\r\n// CHECAGEM ANTIGA - SALVANDO PRA NÃO PERDER LÓGICA\r\n// const checkUserExists = async (username, email) => {\r\n//   const queryUrl = `${urlallUsers}?where=${encodeURIComponent(JSON.stringify({\r\n//     $or: [\r\n//       { username: username },\r\n//       { email: email }\r\n//     ]\r\n//   }))}`;\r\n  \r\n//   const response = await fetch(queryUrl, {\r\n//     method: \"GET\",\r\n//     headers: headersJson,\r\n//   });\r\n\r\n//   const data = await response.json();\r\n//   return data.results.length > 0;\r\n// };\r\n\r\nconst createUserVip = async () => {\r\n\r\n    let token = generateToken();\r\n     \r\n    const userData = {\r\n      usernameTwo: userName2.value,\r\n      usernameThree: userName3.value,\r\n      tokenVip: token\r\n    };\r\n\r\n    const response = await fetch(urlUsersVip, {\r\n      method: \"POST\",\r\n      headers: headersJson,\r\n      body: JSON.stringify(userData),\r\n    });\r\n  \r\n    if (response.ok) {\r\n      const pickId = await response.json();\r\n      restrictInformation(pickId.objectId, token); // putting the information in user place\r\n    } else {\r\n      const errorData = await response.json();\r\n      failAlert.textContent = `Erro ao criar usuário vip: ${errorData.error}`;\r\n    }\r\n  };\r\n\r\n  const restrictInformation = async (userVipId, token) => {\r\n  const userData = {\r\n    username: userName1.value,\r\n    email: email.value,\r\n    password: password.value,\r\n    UserVip: {\r\n        \"__type\": \"Pointer\",\r\n        \"className\": \"UserVip\",\r\n        \"objectId\": userVipId\r\n      },\r\n  };\r\n\r\n  const response = await fetch(urlAllUsers, {\r\n    method: \"POST\",\r\n    headers: headersJson,\r\n    body: JSON.stringify(userData),\r\n  });\r\n\r\n  if (response.ok) {\r\n    const h3 = document.getElementById('h3-token');\r\n    const p = document.getElementById('token');\r\n    h3.innerHTML = \"Token vip (salve ele em algum lugar)\"\r\n    p.innerHTML = token;\r\n    failAlert.textContent = \"\";\r\n    return await response.json();\r\n  } else {\r\n    const errorData = await response.json();\r\n    failAlert.textContent = `Erro ao criar usuário vip: ${errorData.error}`;\r\n  }\r\n};\r\n\r\nbuttonCreateAccount.addEventListener(\"click\", async () => {\r\n  try {\r\n    if (!/^[a-zA-Z]+$/.test(userName1.value) && !/^[a-zA-Z]+$/.test(userName2.value) && !/^[a-zA-Z]+$/.test(userName1.value)) {\r\n      throw new Error(\"O nome de usuário é composto apenas por letras.\");\r\n    } else if (userName1.value === \"\" || userName2.value == \"\" ||  userName2.value == \"\" || email.value === \"\" || password.value === \"\") {\r\n      throw new Error(\"Preencha os campos restantes.\");\r\n    } else if (userName1.value.length < 3) {\r\n      throw new Error(\"O nome de usuário deve ter pelo menos 3 caracteres.\");\r\n    } else if (password.value.length < 5) {\r\n      throw new Error(\"A senha deve ter no mínimo 5 caracteres.\");\r\n    }\r\n\r\n    // CHECAGEM ANTIGA - SALVANDO PRA NÃO PERDER LÓGICA\r\n    // const userExists = await checkUserExists(userName1.value, email.value);\r\n    // if (userExists) {\r\n    //   throw new Error(\"Nome de usuário ou email já existente.\");\r\n    // }\r\n    \r\n    const usernameExists = await checkExists(\"username\", userName1.value);\r\n    if (usernameExists) {\r\n      throw new Error(\"Usuário já existente, mude o nome de usuário.\");\r\n    }\r\n\r\n    const useremailExists = await checkExists(\"email\", email.value);\r\n    if (useremailExists) {\r\n      throw new Error(\"Usuário já existente, mude o email de usuário.\");\r\n    }\r\n\r\n    await createUserVip();\r\n  } catch (error) {\r\n    failAlert.textContent = error.message;\r\n  }\r\n});\r\n\r\nfunction generateToken() {\r\n    let chars =\r\n      \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n    let tokenNumber = \"\";\r\n    for (let i = 0; i < 20; i++) {\r\n      tokenNumber += chars[Math.floor(Math.random() * chars.length)];\r\n    }\r\n    return tokenNumber;\r\n}  "],"names":["userName1","document","getElementById","userName2","userName3","email","password","buttonCreateAccount","failAlert","urlUsersVip","urlAllUsers","headersJson","checkExists","field","value","response","fetch","method","headers","ok","data","json","results","length","errorData","Error","error","responseVip","createUserVip","token","generateToken","chars","tokenNumber","i","Math","floor","random","userData","usernameTwo","usernameThree","tokenVip","body","JSON","stringify","restrictInformation","pickId","objectId","textContent","userVipId","username","UserVip","h3","p","innerHTML","addEventListener","test","message"],"version":3,"file":"loginVip.117825d2.js.map"}